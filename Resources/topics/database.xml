<div class="module" name="Database">
<div class="section" name="Introduction">
	<p>
	There are two ways to use databases in Titanium: HTML 5 databases
	and the database API. In some cases you access the same database
	file with both APIs as well. Currently both APIs use SQLite backends.
	</p>
</div>

<div class="section" name="Opening a Database">
	<p>
	There are two ways to open Titanim databases, <tt>Titanium.Database.open</tt>
	and <tt>Titanium.Database.openFile</tt>. <tt>open</tt> will create (if necessarY0
	and open a database in the same directory and schema as WebKit HTML 5 databases.
	Use this method if you'd like to use a single database with both APIs.
	<pre class="api_code"><code>
		// Create a WebKit-compatible database given, the database name.
		var db = Titanium.Database.open('mydatabase');
	</code></pre>
	</p>

	<p>
	You may also create a database using <tt>Titanium.Database.openFile</tt>
	which can be given a file path or <tt>Titanium.Filesystem.File</tt> object.
	If the database file does not exist, the method will create it and open it.
	<pre class="api_code"><code>
		var db = Titanium.Database.openFile(Titanium.Filesystem.getFile(
			Titanium.Filesystem.getApplicationDataDirectory(), 'mydatabase.db'));
	</code></pre>
	<em>Note: It's recommended that you store all data in the application data
	directory and not the application Resources or contents directory, as those
	may not be writeable.</em>
	</p>
</div>

<div class="section" name="Simple Queries">
	<p>
	Once a database is open you may execute simple queries on it. For instance,
	to create a table:
	<pre class="api_code"><code>
		var db = Titanium.Database.openFile(Titanium.Filesystem.getFile(
			Titanium.Filesystem.getApplicationDataDirectory(), 'mydatabase.db'));
		db.execute("CREATE TABLE TEST (id INT, name TEXT)");
	</code></pre>
	<em>Note: Be sure your query is SQLite-compatible! SQLite has different data
	types than MySQL, check them out <a href="blahblah">here</a>.</em>
	</p>

	Find a way to detect databases that already exist.

	<p>
	Inserting and retrieving data works in a very similar way:
	<pre class="api_code"><code>
		var db = Titanium.Database.openFile(Titanium.Filesystem.getFile(
			Titanium.Filesystem.getApplicationDataDirectory(), 'mydatabase.db'));

		db.execute("CREATE TABLE TEST (id INT, name TEXT)");
		db.execute("INSERT INTO TEST VALUES(123, 'a')");

		var resultSet = db.execute("SELECT * FROM TEST");
		alert("Found " + resultSet.rowCount() + " rows");
		while (resultSet.isValidRow())
		{
			var text = "";
			for (var i = 0; i &lt; resultSet.fieldCount(); i++)
				text += resultSet.fieldName(i) + ":"
					 + resultSet.field(i) + " ";
		}
	</code></pre>
	</p>
</div>

<div class="section" name="Advanced Queries">
	<p>
	You should never used unescaped input in SQL queries. In these situations
	Titanium provides a query template mechanism:

	<pre class="api_code"><code>
		var db = Titanium.Database.openFile(Titanium.Filesystem.getFile(
			Titanium.Filesystem.getApplicationDataDirectory(), 'mydatabase.db'));

		var id = confirm("Enter entry id");
		if (!id)
			return;
		var value = confirm("Enter entry value");
		if (!value)
			return;

		db.execute("CREATE TABLE TEST (id INT, name TEXT)");
		db.execute("INSERT INTO TEST VALUES(?, ?)", id, value);

		var resultSet = db.execute("SELECT * FROM TEST");
		alert("Found " + resultSet.rowCount() + " rows");
		while (resultSet.isValidRow())
		{
			var text = "";
			for (var i = 0; i &lt; resultSet.fieldCount(); i++)
				text += resultSet.fieldName(i) + ":"
					 + resultSet.field(i) + " ";
		}
	</code></pre>
	</p>
</div>
</div>
